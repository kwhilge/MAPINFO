CREATE OR REPLACE 
PACKAGE BODY GEO_ARCGIS
IS
  -- mrosenblum@dulcian.com - May 2006 -- support of GeoCoding Cartridge  v4
  -- pburzi@dulcian.com - May 2008 -- modified to support physician maps
  --pburzi@dulcian.com - July 2008 - modified getZoneIdByAddres procedures/functions to call a new function which resolves the zone id by State / Zip only

/*
  function f_geocodeAddress(i_street_tx varchar2, i_city_tx varchar2, i_state_tx varchar2, i_zip_tx varchar2, i_country_tx varchar2)
  return MDSYS.sdo_point_type
  is
       dbmode varchar2(255) := syn_afris_admin.f_getglobaltx('DBMode');

       soap_request   VARCHAR2 (4000);
       http_req       UTL_HTTP.req;
       http_resp      UTL_HTTP.resp;
       responseData   VARCHAR2 (32000);
       responseXml    XMLTYPE;
       x              VARCHAR2 (255);
       y              VARCHAR2 (255);
       point          MDSYS.sdo_point_type;

       ex_custom EXCEPTION;
       PRAGMA EXCEPTION_INIT( ex_custom, -20001 );

       v_url_tx       varchar2(255) := 'http://'||syn_afris_admin.f_getglobaltx('ArcGISServerHost_' || dbmode)||'/arcgis/services/Geocode_Composite_NA/GeocodeServer';
    BEGIN
      if i_zip_tx in ('09104') then --Certain Zip codes are not be geocoded correctly by ArcGIS and shouldn't use the point it determines
        raise ex_custom;
      end if;

       --Generate SOAP Request
       soap_request :=
          '<?xml version="1.0" encoding="UTF-8"?>
            <env:Envelope xmlns:env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns0="http://www.esri.com/schemas/ArcGIS/10.1">
                <env:Body>
                    <ns0:GeocodeAddress>
                        <Address>
                            <PropertyArray>
                                <PropertySetProperty>
                                    <Key>Street</Key>
                                    <Value xsi:type="xsd:string">'||i_street_tx||'</Value>
                                </PropertySetProperty>
                                <PropertySetProperty>
                                    <Key>City</Key>
                                    <Value xsi:type="xsd:string">'||i_city_tx||'</Value>
                                </PropertySetProperty>
                                <PropertySetProperty>
                                    <Key>State</Key>
                                    <Value xsi:type="xsd:string">'||i_state_tx||'</Value>
                                </PropertySetProperty>
                                <PropertySetProperty>
                                    <Key>ZIP</Key>
                                    <Value xsi:type="xsd:string">'||i_zip_tx||'</Value>
                                </PropertySetProperty>
                                <PropertySetProperty>
                                    <Key>Country</Key>
                                    <Value xsi:type="xsd:string">'||i_country_tx||'</Value>
                                </PropertySetProperty>
                            </PropertyArray>
                        </Address>
                        <PropMods>
                            <PropertyArray/>
                        </PropMods>
                    </ns0:GeocodeAddress>
                </env:Body>
            </env:Envelope>';

       --Create an HTTP request to the server
       http_req := UTL_HTTP.begin_request(v_url_tx, 'POST', 'HTTP/1.1');

       --Set the headers
       UTL_HTTP.set_header (http_req, 'Content-Type', 'text/xml');
       UTL_HTTP.set_header (http_req, 'Content-Length', LENGTH (soap_request));
       UTL_HTTP.set_header (http_req, 'SOAPAction', '');

       --Write the SOAP envelope to the request
       UTL_HTTP.write_text (http_req, soap_request);

       --Get the server response and read back the results
       http_resp := UTL_HTTP.get_response (http_req);
       UTL_HTTP.read_text (http_resp, responseData);

       --Close the connection out
       UTL_HTTP.end_response(http_resp);
       --dbms_output.put_line(responseData);
       --Parse the result into an XML object
       responseXml := XMLTYPE.createxml (responseData);

       --Extract the X, Y coordinate
       x :=
          XMLTYPE.getstringval
             (responseXml.EXTRACT
                 ('/soap:Envelope/soap:Body/tns:GeocodeAddressResponse/Result/PropertyArray/PropertySetProperty/Key[text()="X"]/../Value/text()',
                  'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.esri.com/schemas/ArcGIS/10.1"'
                 )
             );
       y :=
          XMLTYPE.getstringval
             (responseXml.EXTRACT
                 ('/soap:Envelope/soap:Body/tns:GeocodeAddressResponse/Result/PropertyArray/PropertySetProperty/Key[text()="Y"]/../Value/text()',
                  'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.esri.com/schemas/ArcGIS/10.1"'
                 )
             );

       --Create a point with the coordinate
       point := MDSYS.sdo_point_type (x, y, NULL);

       return point;
    exception
        when others then
            begin
                UTL_HTTP.end_response(http_resp);
            exception when others then
                null;
            end;

            begin
                UTL_HTTP.end_request(http_req);
            exception when others then
                null;
            end;

            if dbmode = 'DEV' then
                return MDSYS.sdo_point_type (-74.286891, 40.564404, NULL); --Woodbridge Geocode
            else
                raise;
            end if;
    END;

  procedure p_StandardizeAddress(io_street_tx in out varchar2, io_city_tx in out varchar2,
                                 io_state_tx in out varchar2, io_zip_tx in out varchar2,
                                 io_country_tx in out varchar2)
  is
       dbmode varchar2(255) := syn_afris_admin.f_getglobaltx('DBMode');

       soap_request   VARCHAR2 (4000);
       http_req       UTL_HTTP.req;
       http_resp      UTL_HTTP.resp;
       responseData   VARCHAR2 (32000);
       responseXml    XMLTYPE;

       v_url_tx       varchar2(255) := 'http://'||syn_afris_admin.f_getglobaltx('ArcGISServerHost_' || dbmode)||'/arcgis/services/Geocode_Composite_NA/GeocodeServer';
    BEGIN
       --Generate SOAP Request
       soap_request :=
          '<?xml version="1.0" encoding="UTF-8"?>
            <env:Envelope xmlns:env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ns0="http://www.esri.com/schemas/ArcGIS/10.1">
                <env:Body>
                    <ns0:GeocodeAddress>
                        <Address>
                            <PropertyArray>
                                <PropertySetProperty>
                                    <Key>Street</Key>
                                    <Value xsi:type="xsd:string">'||io_street_tx||'</Value>
                                </PropertySetProperty>
                                <PropertySetProperty>
                                    <Key>City</Key>
                                    <Value xsi:type="xsd:string">'||io_city_tx||'</Value>
                                </PropertySetProperty>
                                <PropertySetProperty>
                                    <Key>State</Key>
                                    <Value xsi:type="xsd:string">'||io_state_tx||'</Value>
                                </PropertySetProperty>
                                <PropertySetProperty>
                                    <Key>ZIP</Key>
                                    <Value xsi:type="xsd:string">'||io_zip_tx||'</Value>
                                </PropertySetProperty>
                                <PropertySetProperty>
                                    <Key>Country</Key>
                                    <Value xsi:type="xsd:string">'||io_country_tx||'</Value>
                                </PropertySetProperty>
                            </PropertyArray>
                        </Address>
                        <PropMods>
                            <PropertyArray/>
                        </PropMods>
                    </ns0:GeocodeAddress>
                </env:Body>
            </env:Envelope>';

       --Create an HTTP request to the server
       http_req := UTL_HTTP.begin_request(v_url_tx, 'POST', 'HTTP/1.1');

       --Set the headers
       UTL_HTTP.set_header (http_req, 'Content-Type', 'text/xml');
       UTL_HTTP.set_header (http_req, 'Content-Length', LENGTH (soap_request));
       UTL_HTTP.set_header (http_req, 'SOAPAction', '');

       --Write the SOAP envelope to the request
       UTL_HTTP.write_text (http_req, soap_request);

       --Get the server response and read back the results
       http_resp := UTL_HTTP.get_response (http_req);
       UTL_HTTP.read_text (http_resp, responseData);

       --Close the connection out
       UTL_HTTP.end_response(http_resp);
       --dbms_output.put_line(responseData);
       --Parse the result into an XML object
       responseXml := XMLTYPE.createxml (responseData);

       --Extract the values
       io_street_tx :=
          XMLTYPE.getstringval
             (responseXml.EXTRACT
                 ('/soap:Envelope/soap:Body/tns:GeocodeAddressResponse/Result/PropertyArray/PropertySetProperty/Key[text()="AddNum"]/../Value/text()',
                  'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.esri.com/schemas/ArcGIS/10.1"'
                 )
             ) || ' ' ||
          XMLTYPE.getstringval
             (responseXml.EXTRACT
                 ('/soap:Envelope/soap:Body/tns:GeocodeAddressResponse/Result/PropertyArray/PropertySetProperty/Key[text()="StName"]/../Value/text()',
                  'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.esri.com/schemas/ArcGIS/10.1"'
                 )
             ) || ' ' ||
          XMLTYPE.getstringval
             (responseXml.EXTRACT
                 ('/soap:Envelope/soap:Body/tns:GeocodeAddressResponse/Result/PropertyArray/PropertySetProperty/Key[text()="StType"]/../Value/text()',
                  'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.esri.com/schemas/ArcGIS/10.1"'
                 )
             )
             ;

       io_city_tx :=
          XMLTYPE.getstringval
             (responseXml.EXTRACT
                 ('/soap:Envelope/soap:Body/tns:GeocodeAddressResponse/Result/PropertyArray/PropertySetProperty/Key[text()="City"]/../Value/text()',
                  'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.esri.com/schemas/ArcGIS/10.1"'
                 )
             );

       io_state_tx :=
          XMLTYPE.getstringval
             (responseXml.EXTRACT
                 ('/soap:Envelope/soap:Body/tns:GeocodeAddressResponse/Result/PropertyArray/PropertySetProperty/Key[text()="Region"]/../Value/text()',
                  'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.esri.com/schemas/ArcGIS/10.1"'
                 )
             );

       io_zip_tx :=
          XMLTYPE.getstringval
             (responseXml.EXTRACT
                 ('/soap:Envelope/soap:Body/tns:GeocodeAddressResponse/Result/PropertyArray/PropertySetProperty/Key[text()="Postal"]/../Value/text()',
                  'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.esri.com/schemas/ArcGIS/10.1"'
                 )
             );

       io_country_tx :=
          XMLTYPE.getstringval
             (responseXml.EXTRACT
                 ('/soap:Envelope/soap:Body/tns:GeocodeAddressResponse/Result/PropertyArray/PropertySetProperty/Key[text()="Country"]/../Value/text()',
                  'xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.esri.com/schemas/ArcGIS/10.1"'
                 )
             );

    exception
        when others then
                null; -- ignore geocoding exceptions
    END;
*/


  function f_getAddressStandardizedField(i_street_tx varchar2, i_city_tx varchar2, i_state_tx varchar2, i_zip_tx varchar2, i_country_tx varchar2, i_field_tx varchar2)
  return varchar2
  is
    v_street_tx varchar2(255) := i_street_tx;
    v_city_tx varchar2(255) := i_city_tx;
    v_state_tx varchar2(255) := i_state_tx;
    v_zip_tx varchar2(255) := i_zip_tx;
    v_country_tx varchar2(255) := i_country_tx;
  begin
/*
    p_StandardizeAddress(v_street_tx, v_city_tx, v_state_tx, v_zip_tx, v_country_tx);

    return case i_field_tx
                when 'Street' then v_street_tx
                when 'City' then v_city_tx
                when 'State' then v_state_tx
                when 'Zip' then v_zip_tx
                when 'Country' then v_country_tx
                else null
           end;
*/
    return null;
  end;

/*
  function f_getMapSRid(type_cd varchar2)
  return number
  is
    v_out_nr number;
    v_table_tx varchar2(255);
  begin
    v_table_tx := case
                       when upper(type_cd) in ('HP','HP_MAP') then 'HP_MAP'
                       when upper(type_cd) in ('LINE', 'LINE_MAP') then 'SYN_LINE_MAP'
                       when upper(type_cd) in ('OA', 'OA_MAP') then 'OA_MAP'
                       when upper(type_cd) in ('PHYSICIAN', 'PHYSICIAN_MAP') then 'PHYSICIAN_MAP'
                       when upper(type_cd) in ('ART', 'ART_MAP') then 'ART_MAP'
                       when upper(type_cd) in ('CHAPLAIN', 'CHAPLAIN_MAP') then 'CHAPLAIN_MAP'
                       when upper(type_cd) in ('AD_OA', 'AD_OA_MAP') then 'AD_OA_MAP'
                   end;

    --Some tables are synonyms get the real table name if it is a synonym
    begin
        select table_name
          into v_table_tx
          from user_synonyms
         where synonym_name = v_table_tx;
   exception
    when no_data_found then
        null;
   end;

    select srid
      into v_out_nr
      from user_sdo_geom_metadata
     where table_name = v_table_tx;

    return v_out_nr;
  end;
*/

  function f_getZoneIDByStateZIP(street varchar2, city varchar2, state varchar2, postal varchar2, type_cd varchar2)
  return varchar2
  is
    --point   MDSYS.sdo_point_type;   -- the geoaddress object
    v_out_zone_id varchar2(256);
    --v_srid_nr number := f_getMapSRid(type_cd);
  begin
    -- Create an misys geoaddress2 object containing the address to be geocoded.
    --point := f_geocodeAddress(street, city, state, postal, 'USA');


    if type_cd in ('HP','HP_MAP')
    then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'HP'
           and zip_tx = postal;
/*
        SELECT terrname INTO v_out_zone_id
        FROM hp_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
    elsif upper(type_cd) in ('LINE', 'LINE_MAP')
    then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'LINE'
           and zip_tx = postal;
/*
        SELECT terrname INTO v_out_zone_id
        FROM syn_line_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
    elsif type_cd in ('OA', 'OA_MAP')
    then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'OA'
           and zip_tx = postal;
/*
        SELECT terrname INTO v_out_zone_id
        FROM OA_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
    elsif type_cd in ('PHYSICIAN', 'PHYSICIAN_MAP')
    then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'OA'
           and zip_tx = postal;
/*
        SELECT terrname INTO v_out_zone_id
        FROM physician_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
    end if;

  return v_out_zone_id;
  exception
        when others
        then
           return getZoneIdByState (state, type_cd);
  end;

  procedure p_getZoneIdBySchool(in_mirs_code varchar2, out_zone_tx out varchar2, out_priority_cd out varchar2) is
  begin
    select afrc_billet, SCHOOL_PRIORITY into out_zone_tx, out_priority_cd
    from school
     where --mirs_code = in_mirs_code;
      school_cod =in_mirs_code;  ---looks like asvabs pass school code rather than mirs code pdorsey march 2005

    exception
    when others then
       null;
  end;

  function getZoneIdByAddres(street varchar2, city varchar2, state varchar2, postal varchar2, type_cd varchar2) return varchar2
  --- valid types  'HP_MAP' 'LINE_MAP'  'OA_MAP'
  --- written by mishe
  ---modified by pdorsey@dulcian.com Jan 2005 to call state map if failed
  as
        --point   MDSYS.sdo_point_type;   -- the geoaddress object
        v_out_zone_id varchar2(256);
        --v_srid_nr number := f_getMapSRid(type_cd);
  begin
    --point := f_geocodeAddress(street, city, state, postal, 'USA');

    if type_cd in ('HP','HP_MAP')
    then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'HP'
           and zip_tx = postal;
/*
        SELECT terrname INTO v_out_zone_id
        FROM hp_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
  elsif upper(type_cd) in ('LINE', 'LINE_MAP')
  then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'LINE'
           and zip_tx = postal;
/*
        SELECT terrname INTO v_out_zone_id
        FROM syn_line_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
  elsif type_cd in ('OA', 'OA_MAP')
  then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'OA'
           and zip_tx = postal;
/*
        SELECT terrname INTO v_out_zone_id
        FROM OA_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
  elsif type_cd in ('PHYSICIAN', 'PHYSICIAN_MAP')
  then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'OA'
           and zip_tx = postal;
/*
        SELECT terrname INTO v_out_zone_id
        FROM physician_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
  elsif type_cd in ('ART', 'ART_MAP')
  then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'ART'
           and zip_tx = postal;
/*
        SELECT MIL_ORG_CODE INTO v_out_zone_id
        FROM art_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
  elsif type_cd in ('CHAPLAIN', 'CHAPLAIN_MAP')
  then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'CHAPLAIN'
           and zip_tx = postal;
/*
        SELECT MIL_ORG_CODE INTO v_out_zone_id
        FROM chaplain_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
  end if;

  return v_out_zone_id;
  exception
        when others
        then
           v_out_zone_id := getZoneIdByCityState(city,state,type_cd);
           if v_out_zone_id is not null then
                return v_out_zone_id;
           else
                return getZoneIdByState (state, type_cd);
           end if;
  end;

  function getZoneIdByBase (in_base_cd varchar2, type_cd varchar2) return varchar2
  is
    v_out_zone_id varchar2(2000);
  begin
    if type_cd = 'ISR_TABLE'
    then
        SELECT MIL_ORG_CODE INTO v_out_zone_id
        from ISR_TABLE
        where base_code = in_base_cd;
    elsif type_cd = 'ISR_HP_TABLE'
    then
        SELECT MIL_ORG_CODE INTO v_out_zone_id
        from ISR_HP_TABLE
        where base_code = in_base_cd;
    elsif type_cd = 'ISR_PHYS_TABLE'
    then
        SELECT MIL_ORG_CODE INTO v_out_zone_id
        from ISR_PHYS_TABLE
        where base_code = in_base_cd;
    end if;

  return v_out_zone_id;

  exception
        when others
        then return 'Error';
  end;

  function getZoneIdByState (in_state_cd varchar2, type_cd varchar2) return varchar2
  ---written by Mrosenblum Jan 2005
  ---Modified to use types Pdorsey@dulcian.com Jan 2005
  is
    v_out_zone_id varchar2(2000);
  begin
  ---------=================
  if type_cd in ('HP','HP_MAP') then  --- there is no HP state table use OA
    SELECT MIL_ORG_CODE INTO v_out_zone_id
    from HP_TABLE
    where state = in_state_cd;
  elsif type_cd in ('LINE','LINE_MAP') then
     SELECT MIL_ORG_CODE INTO v_out_zone_id
     from LINE_TABLE
     where state = in_state_cd;
  elsif type_cd in ('OA','OA_MAP') then
    SELECT MIL_ORG_CODE INTO v_out_zone_id
    from OA_TABLE
    where state = in_state_cd;
  end if;

  return v_out_zone_id;

  exception
        when others
        then return 'Error';
  end;

  function getZoneIdByCityState (in_city_cd varchar2, in_state_cd varchar2, type_cd varchar2) return varchar2
  is
    v_type_cd varchar2(255);
    v_out_zone_id varchar2(2000);
  begin
    if type_cd in ('HP','HP_MAP') then
        v_type_cd := 'HP';
    elsif upper(type_cd) in ('LINE', 'LINE_MAP') then
        v_type_cd := 'LINE';
    elsif type_cd in ('OA', 'OA_MAP') then
        v_type_cd := 'OA';
    elsif type_cd in ('PHYSICIAN', 'PHYSICIAN_MAP') then
        v_type_cd := 'OA';
    elsif type_cd in ('ART', 'ART_MAP') then
        v_type_cd := 'ART';
    elsif type_cd in ('CHAPLAIN', 'CHAPLAIN_MAP') then
        v_type_cd := 'CHAPLAIN';
    end if;

    select zoneid_tx
      into v_out_zone_id
      from rc_afrpaidlead_map
     where type_tx = v_type_cd
       and trim(upper(city_tx)) = trim(upper(in_city_cd))
       and trim(upper(state_tx)) = trim(upper(in_state_cd))
       and rownum = 1;

    return v_out_zone_id;
  exception
    when others then
        return null;
  end;

  procedure p_getZoneIdByAddres(street varchar2, city varchar2, state varchar2, postal varchar2, type_cd varchar2, zone_id out varchar2, distance_nr out number)
  --- valid types  'HP_MAP' 'LINE_MAP'  'OA_MAP'
  --- written by mishe
  ---modified by pdorsey@dulcian.com Jan 2005 to call state map if failed
  --modified to support 2 char calls pdorsey Feb 2005
  as
        --point   MDSYS.sdo_point_type;   -- the geoaddress object
        v_out_zone_id varchar2(256);
        --v_office_lat_nr  number;
        --v_office_long_nr number;
        --v_srid_nr number := f_getMapSRid(type_cd);
  begin
    --point := f_geocodeAddress(street, city, state, postal, 'USA');

    if type_cd in ('HP','HP_MAP') then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'HP'
           and zip_tx = postal;
/*
        SELECT terrname
        INTO v_out_zone_id
        FROM hp_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
    elsif upper(type_cd) in ('LINE','LINE_MAP')  then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'LINE'
           and zip_tx = postal;
/*
        SELECT terrname
        INTO v_out_zone_id
        FROM syn_line_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
    elsif type_cd in ('OA','OA_MAP')  then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'OA'
           and zip_tx = postal;
/*
        SELECT terrname
        INTO v_out_zone_id
        FROM OA_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
    elsif type_cd in ('PHYSICIAN','PHYSICIAN_MAP')  then
        select zoneid_tx
          into v_out_zone_id
          from rc_afrpaidlead_map
         where type_tx = 'OA'
           and zip_tx = postal;
/*
        SELECT terrname
        INTO v_out_zone_id
        FROM PHYSICIAN_map C
        WHERE MDSYS.SDO_RELATE (C.SHAPE, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';
*/
    end if;



    zone_id:= v_out_zone_id;
    distance_nr := 0;
/*
    select sdo_geom.sdo_distance(
        MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),
        MDSYS.SDO_GEOMETRY(2001,v_srid_nr, MDSYS.SDO_POINT_TYPE(v_office_long_nr, v_office_lat_nr, NULL), NULL, NULL),
        0.005,
        'unit=mile')
    into distance_nr
    from dual;
*/

  exception
        when others
        then
           zone_id:= getZoneIdByState (state, type_cd);
           distance_nr:= 0;
  end;

/*
  function f_getZoneIdByAddres_AD_tx(street varchar2, city varchar2, state varchar2, postal varchar2, type_cd varchar2)
  return varchar2
  -- mrosenblum@dulcian.com - 20080630 - special version for active duty
  as
        point   MDSYS.sdo_point_type;   -- the geoaddress object
        v_out_zone_id varchar2(256);
        v_srid_nr number := f_getMapSRid('AD_'||type_cd);
  begin
    point := f_geocodeAddress(street, city, state, postal, 'USA');

    SELECT office
    INTO v_out_zone_id
    FROM AD_OA_MAP C
    WHERE MDSYS.SDO_RELATE (C.GEOLOC, MDSYS.SDO_GEOMETRY(2001,v_srid_nr, point, NULL, NULL),'MASK=ANYINTERACT QUERYTYPE=WINDOW')='TRUE';

    return v_out_zone_id;

  exception
        when others
        then
            return null;
  end;
*/

END;
/
